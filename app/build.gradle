apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

def libs = rootProject.ext.libraries
def config = rootProject.ext.configuration

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName "${config.versionHigh}.${config.versionMiddle}.${config.versionLow}"
        testInstrumentationRunner config.testInstrumentationRunner

        //CONSTANTS
        buildConfigField "String", "API_KEY", project.property('LAST_FM_API_KEY')
        buildConfigField "String", "API_URL", project.property('LAST_FM_ROOT_URL')

    }
    buildTypes {
        debug {
            minifyEnabled false

        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //TESTING - UNIT
    testImplementation "junit:junit:${libs.jUnit}"
    testImplementation "org.robolectric:robolectric:${libs.robolectric}"
    testImplementation "io.mockk:mockk:${libs.mockk}"
    testImplementation "androidx.room:room-testing:${libs.room}"
    //TESTING - INSTRUMENTATION
    androidTestImplementation "io.mockk:mockk:${libs.mockk}"
    androidTestImplementation "androidx.test:runner:${libs.androidTestRunner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${libs.espresso}"
    //JSON PARSING
    implementation "com.squareup.moshi:moshi-kotlin:${libs.moshi}"
    //ANDROID + KOTLIN
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:${libs.appCompat}"
    implementation "androidx.core:core-ktx:${libs.ktxCore}"
    //ANDROID UI
    implementation "com.google.android.material:material:${libs.material}"
    implementation "androidx.constraintlayout:constraintlayout:${libs.constraintLayout}"
    //ANDROID ARCHITECTURE
    implementation "androidx.lifecycle:lifecycle-extensions:${libs.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-extensions:${libs.lifecycle}"
    //COROUTINES
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libs.coroutines}"
    //DEPENDENCY INJECTION
    implementation "org.koin:koin-androidx-scope:${libs.koin}"
    implementation "org.koin:koin-androidx-viewmodel:${libs.koin}"
    // LOCAL - DATABASE
    implementation "androidx.room:room-runtime:${libs.room}"
    kapt "androidx.room:room-compiler:${libs.room}"
    //REMOTE - API
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    //IMAGES
    implementation "com.github.bumptech.glide:glide:${libs.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${libs.glide}"


}
